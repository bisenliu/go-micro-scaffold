// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"services/internal/infrastructure/persistence/ent/gen/casbinrule"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CasbinRule is the model entity for the CasbinRule schema.
type CasbinRule struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 策略类型
	Ptype string `json:"ptype,omitempty"`
	// 策略字段0
	V0 *string `json:"v0,omitempty"`
	// 策略字段1
	V1 *string `json:"v1,omitempty"`
	// 策略字段2
	V2 *string `json:"v2,omitempty"`
	// 策略字段3
	V3 *string `json:"v3,omitempty"`
	// 策略字段4
	V4 *string `json:"v4,omitempty"`
	// 策略字段5
	V5 *string `json:"v5,omitempty"`
	// 创建时间
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CasbinRule) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case casbinrule.FieldID:
			values[i] = new(sql.NullInt64)
		case casbinrule.FieldPtype, casbinrule.FieldV0, casbinrule.FieldV1, casbinrule.FieldV2, casbinrule.FieldV3, casbinrule.FieldV4, casbinrule.FieldV5:
			values[i] = new(sql.NullString)
		case casbinrule.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CasbinRule fields.
func (_m *CasbinRule) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case casbinrule.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case casbinrule.FieldPtype:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ptype", values[i])
			} else if value.Valid {
				_m.Ptype = value.String
			}
		case casbinrule.FieldV0:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field v0", values[i])
			} else if value.Valid {
				_m.V0 = new(string)
				*_m.V0 = value.String
			}
		case casbinrule.FieldV1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field v1", values[i])
			} else if value.Valid {
				_m.V1 = new(string)
				*_m.V1 = value.String
			}
		case casbinrule.FieldV2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field v2", values[i])
			} else if value.Valid {
				_m.V2 = new(string)
				*_m.V2 = value.String
			}
		case casbinrule.FieldV3:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field v3", values[i])
			} else if value.Valid {
				_m.V3 = new(string)
				*_m.V3 = value.String
			}
		case casbinrule.FieldV4:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field v4", values[i])
			} else if value.Valid {
				_m.V4 = new(string)
				*_m.V4 = value.String
			}
		case casbinrule.FieldV5:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field v5", values[i])
			} else if value.Valid {
				_m.V5 = new(string)
				*_m.V5 = value.String
			}
		case casbinrule.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CasbinRule.
// This includes values selected through modifiers, order, etc.
func (_m *CasbinRule) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this CasbinRule.
// Note that you need to call CasbinRule.Unwrap() before calling this method if this CasbinRule
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *CasbinRule) Update() *CasbinRuleUpdateOne {
	return NewCasbinRuleClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the CasbinRule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *CasbinRule) Unwrap() *CasbinRule {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("gen: CasbinRule is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *CasbinRule) String() string {
	var builder strings.Builder
	builder.WriteString("CasbinRule(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("ptype=")
	builder.WriteString(_m.Ptype)
	builder.WriteString(", ")
	if v := _m.V0; v != nil {
		builder.WriteString("v0=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.V1; v != nil {
		builder.WriteString("v1=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.V2; v != nil {
		builder.WriteString("v2=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.V3; v != nil {
		builder.WriteString("v3=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.V4; v != nil {
		builder.WriteString("v4=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.V5; v != nil {
		builder.WriteString("v5=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CasbinRules is a parsable slice of CasbinRule.
type CasbinRules []*CasbinRule
