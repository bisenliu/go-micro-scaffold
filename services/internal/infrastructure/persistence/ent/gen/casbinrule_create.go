// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"services/internal/infrastructure/persistence/ent/gen/casbinrule"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CasbinRuleCreate is the builder for creating a CasbinRule entity.
type CasbinRuleCreate struct {
	config
	mutation *CasbinRuleMutation
	hooks    []Hook
}

// SetPtype sets the "ptype" field.
func (_c *CasbinRuleCreate) SetPtype(v string) *CasbinRuleCreate {
	_c.mutation.SetPtype(v)
	return _c
}

// SetV0 sets the "v0" field.
func (_c *CasbinRuleCreate) SetV0(v string) *CasbinRuleCreate {
	_c.mutation.SetV0(v)
	return _c
}

// SetNillableV0 sets the "v0" field if the given value is not nil.
func (_c *CasbinRuleCreate) SetNillableV0(v *string) *CasbinRuleCreate {
	if v != nil {
		_c.SetV0(*v)
	}
	return _c
}

// SetV1 sets the "v1" field.
func (_c *CasbinRuleCreate) SetV1(v string) *CasbinRuleCreate {
	_c.mutation.SetV1(v)
	return _c
}

// SetNillableV1 sets the "v1" field if the given value is not nil.
func (_c *CasbinRuleCreate) SetNillableV1(v *string) *CasbinRuleCreate {
	if v != nil {
		_c.SetV1(*v)
	}
	return _c
}

// SetV2 sets the "v2" field.
func (_c *CasbinRuleCreate) SetV2(v string) *CasbinRuleCreate {
	_c.mutation.SetV2(v)
	return _c
}

// SetNillableV2 sets the "v2" field if the given value is not nil.
func (_c *CasbinRuleCreate) SetNillableV2(v *string) *CasbinRuleCreate {
	if v != nil {
		_c.SetV2(*v)
	}
	return _c
}

// SetV3 sets the "v3" field.
func (_c *CasbinRuleCreate) SetV3(v string) *CasbinRuleCreate {
	_c.mutation.SetV3(v)
	return _c
}

// SetNillableV3 sets the "v3" field if the given value is not nil.
func (_c *CasbinRuleCreate) SetNillableV3(v *string) *CasbinRuleCreate {
	if v != nil {
		_c.SetV3(*v)
	}
	return _c
}

// SetV4 sets the "v4" field.
func (_c *CasbinRuleCreate) SetV4(v string) *CasbinRuleCreate {
	_c.mutation.SetV4(v)
	return _c
}

// SetNillableV4 sets the "v4" field if the given value is not nil.
func (_c *CasbinRuleCreate) SetNillableV4(v *string) *CasbinRuleCreate {
	if v != nil {
		_c.SetV4(*v)
	}
	return _c
}

// SetV5 sets the "v5" field.
func (_c *CasbinRuleCreate) SetV5(v string) *CasbinRuleCreate {
	_c.mutation.SetV5(v)
	return _c
}

// SetNillableV5 sets the "v5" field if the given value is not nil.
func (_c *CasbinRuleCreate) SetNillableV5(v *string) *CasbinRuleCreate {
	if v != nil {
		_c.SetV5(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *CasbinRuleCreate) SetCreatedAt(v time.Time) *CasbinRuleCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *CasbinRuleCreate) SetNillableCreatedAt(v *time.Time) *CasbinRuleCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// Mutation returns the CasbinRuleMutation object of the builder.
func (_c *CasbinRuleCreate) Mutation() *CasbinRuleMutation {
	return _c.mutation
}

// Save creates the CasbinRule in the database.
func (_c *CasbinRuleCreate) Save(ctx context.Context) (*CasbinRule, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *CasbinRuleCreate) SaveX(ctx context.Context) *CasbinRule {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CasbinRuleCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CasbinRuleCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *CasbinRuleCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := casbinrule.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *CasbinRuleCreate) check() error {
	if _, ok := _c.mutation.Ptype(); !ok {
		return &ValidationError{Name: "ptype", err: errors.New(`gen: missing required field "CasbinRule.ptype"`)}
	}
	if v, ok := _c.mutation.Ptype(); ok {
		if err := casbinrule.PtypeValidator(v); err != nil {
			return &ValidationError{Name: "ptype", err: fmt.Errorf(`gen: validator failed for field "CasbinRule.ptype": %w`, err)}
		}
	}
	if v, ok := _c.mutation.V0(); ok {
		if err := casbinrule.V0Validator(v); err != nil {
			return &ValidationError{Name: "v0", err: fmt.Errorf(`gen: validator failed for field "CasbinRule.v0": %w`, err)}
		}
	}
	if v, ok := _c.mutation.V1(); ok {
		if err := casbinrule.V1Validator(v); err != nil {
			return &ValidationError{Name: "v1", err: fmt.Errorf(`gen: validator failed for field "CasbinRule.v1": %w`, err)}
		}
	}
	if v, ok := _c.mutation.V2(); ok {
		if err := casbinrule.V2Validator(v); err != nil {
			return &ValidationError{Name: "v2", err: fmt.Errorf(`gen: validator failed for field "CasbinRule.v2": %w`, err)}
		}
	}
	if v, ok := _c.mutation.V3(); ok {
		if err := casbinrule.V3Validator(v); err != nil {
			return &ValidationError{Name: "v3", err: fmt.Errorf(`gen: validator failed for field "CasbinRule.v3": %w`, err)}
		}
	}
	if v, ok := _c.mutation.V4(); ok {
		if err := casbinrule.V4Validator(v); err != nil {
			return &ValidationError{Name: "v4", err: fmt.Errorf(`gen: validator failed for field "CasbinRule.v4": %w`, err)}
		}
	}
	if v, ok := _c.mutation.V5(); ok {
		if err := casbinrule.V5Validator(v); err != nil {
			return &ValidationError{Name: "v5", err: fmt.Errorf(`gen: validator failed for field "CasbinRule.v5": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "CasbinRule.created_at"`)}
	}
	return nil
}

func (_c *CasbinRuleCreate) sqlSave(ctx context.Context) (*CasbinRule, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *CasbinRuleCreate) createSpec() (*CasbinRule, *sqlgraph.CreateSpec) {
	var (
		_node = &CasbinRule{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(casbinrule.Table, sqlgraph.NewFieldSpec(casbinrule.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Ptype(); ok {
		_spec.SetField(casbinrule.FieldPtype, field.TypeString, value)
		_node.Ptype = value
	}
	if value, ok := _c.mutation.V0(); ok {
		_spec.SetField(casbinrule.FieldV0, field.TypeString, value)
		_node.V0 = &value
	}
	if value, ok := _c.mutation.V1(); ok {
		_spec.SetField(casbinrule.FieldV1, field.TypeString, value)
		_node.V1 = &value
	}
	if value, ok := _c.mutation.V2(); ok {
		_spec.SetField(casbinrule.FieldV2, field.TypeString, value)
		_node.V2 = &value
	}
	if value, ok := _c.mutation.V3(); ok {
		_spec.SetField(casbinrule.FieldV3, field.TypeString, value)
		_node.V3 = &value
	}
	if value, ok := _c.mutation.V4(); ok {
		_spec.SetField(casbinrule.FieldV4, field.TypeString, value)
		_node.V4 = &value
	}
	if value, ok := _c.mutation.V5(); ok {
		_spec.SetField(casbinrule.FieldV5, field.TypeString, value)
		_node.V5 = &value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(casbinrule.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// CasbinRuleCreateBulk is the builder for creating many CasbinRule entities in bulk.
type CasbinRuleCreateBulk struct {
	config
	err      error
	builders []*CasbinRuleCreate
}

// Save creates the CasbinRule entities in the database.
func (_c *CasbinRuleCreateBulk) Save(ctx context.Context) ([]*CasbinRule, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*CasbinRule, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CasbinRuleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *CasbinRuleCreateBulk) SaveX(ctx context.Context) []*CasbinRule {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CasbinRuleCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CasbinRuleCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
