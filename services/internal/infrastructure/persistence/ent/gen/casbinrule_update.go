// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"services/internal/infrastructure/persistence/ent/gen/casbinrule"
	"services/internal/infrastructure/persistence/ent/gen/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CasbinRuleUpdate is the builder for updating CasbinRule entities.
type CasbinRuleUpdate struct {
	config
	hooks    []Hook
	mutation *CasbinRuleMutation
}

// Where appends a list predicates to the CasbinRuleUpdate builder.
func (_u *CasbinRuleUpdate) Where(ps ...predicate.CasbinRule) *CasbinRuleUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetPtype sets the "ptype" field.
func (_u *CasbinRuleUpdate) SetPtype(v string) *CasbinRuleUpdate {
	_u.mutation.SetPtype(v)
	return _u
}

// SetNillablePtype sets the "ptype" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillablePtype(v *string) *CasbinRuleUpdate {
	if v != nil {
		_u.SetPtype(*v)
	}
	return _u
}

// SetV0 sets the "v0" field.
func (_u *CasbinRuleUpdate) SetV0(v string) *CasbinRuleUpdate {
	_u.mutation.SetV0(v)
	return _u
}

// SetNillableV0 sets the "v0" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillableV0(v *string) *CasbinRuleUpdate {
	if v != nil {
		_u.SetV0(*v)
	}
	return _u
}

// ClearV0 clears the value of the "v0" field.
func (_u *CasbinRuleUpdate) ClearV0() *CasbinRuleUpdate {
	_u.mutation.ClearV0()
	return _u
}

// SetV1 sets the "v1" field.
func (_u *CasbinRuleUpdate) SetV1(v string) *CasbinRuleUpdate {
	_u.mutation.SetV1(v)
	return _u
}

// SetNillableV1 sets the "v1" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillableV1(v *string) *CasbinRuleUpdate {
	if v != nil {
		_u.SetV1(*v)
	}
	return _u
}

// ClearV1 clears the value of the "v1" field.
func (_u *CasbinRuleUpdate) ClearV1() *CasbinRuleUpdate {
	_u.mutation.ClearV1()
	return _u
}

// SetV2 sets the "v2" field.
func (_u *CasbinRuleUpdate) SetV2(v string) *CasbinRuleUpdate {
	_u.mutation.SetV2(v)
	return _u
}

// SetNillableV2 sets the "v2" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillableV2(v *string) *CasbinRuleUpdate {
	if v != nil {
		_u.SetV2(*v)
	}
	return _u
}

// ClearV2 clears the value of the "v2" field.
func (_u *CasbinRuleUpdate) ClearV2() *CasbinRuleUpdate {
	_u.mutation.ClearV2()
	return _u
}

// SetV3 sets the "v3" field.
func (_u *CasbinRuleUpdate) SetV3(v string) *CasbinRuleUpdate {
	_u.mutation.SetV3(v)
	return _u
}

// SetNillableV3 sets the "v3" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillableV3(v *string) *CasbinRuleUpdate {
	if v != nil {
		_u.SetV3(*v)
	}
	return _u
}

// ClearV3 clears the value of the "v3" field.
func (_u *CasbinRuleUpdate) ClearV3() *CasbinRuleUpdate {
	_u.mutation.ClearV3()
	return _u
}

// SetV4 sets the "v4" field.
func (_u *CasbinRuleUpdate) SetV4(v string) *CasbinRuleUpdate {
	_u.mutation.SetV4(v)
	return _u
}

// SetNillableV4 sets the "v4" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillableV4(v *string) *CasbinRuleUpdate {
	if v != nil {
		_u.SetV4(*v)
	}
	return _u
}

// ClearV4 clears the value of the "v4" field.
func (_u *CasbinRuleUpdate) ClearV4() *CasbinRuleUpdate {
	_u.mutation.ClearV4()
	return _u
}

// SetV5 sets the "v5" field.
func (_u *CasbinRuleUpdate) SetV5(v string) *CasbinRuleUpdate {
	_u.mutation.SetV5(v)
	return _u
}

// SetNillableV5 sets the "v5" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillableV5(v *string) *CasbinRuleUpdate {
	if v != nil {
		_u.SetV5(*v)
	}
	return _u
}

// ClearV5 clears the value of the "v5" field.
func (_u *CasbinRuleUpdate) ClearV5() *CasbinRuleUpdate {
	_u.mutation.ClearV5()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *CasbinRuleUpdate) SetCreatedAt(v time.Time) *CasbinRuleUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *CasbinRuleUpdate) SetNillableCreatedAt(v *time.Time) *CasbinRuleUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// Mutation returns the CasbinRuleMutation object of the builder.
func (_u *CasbinRuleUpdate) Mutation() *CasbinRuleMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *CasbinRuleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CasbinRuleUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *CasbinRuleUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CasbinRuleUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CasbinRuleUpdate) check() error {
	if v, ok := _u.mutation.Ptype(); ok {
		if err := casbinrule.PtypeValidator(v); err != nil {
			return &ValidationError{Name: "ptype", err: fmt.Errorf(`gen: validator failed for field "CasbinRule.ptype": %w`, err)}
		}
	}
	if v, ok := _u.mutation.V0(); ok {
		if err := casbinrule.V0Validator(v); err != nil {
			return &ValidationError{Name: "v0", err: fmt.Errorf(`gen: validator failed for field "CasbinRule.v0": %w`, err)}
		}
	}
	if v, ok := _u.mutation.V1(); ok {
		if err := casbinrule.V1Validator(v); err != nil {
			return &ValidationError{Name: "v1", err: fmt.Errorf(`gen: validator failed for field "CasbinRule.v1": %w`, err)}
		}
	}
	if v, ok := _u.mutation.V2(); ok {
		if err := casbinrule.V2Validator(v); err != nil {
			return &ValidationError{Name: "v2", err: fmt.Errorf(`gen: validator failed for field "CasbinRule.v2": %w`, err)}
		}
	}
	if v, ok := _u.mutation.V3(); ok {
		if err := casbinrule.V3Validator(v); err != nil {
			return &ValidationError{Name: "v3", err: fmt.Errorf(`gen: validator failed for field "CasbinRule.v3": %w`, err)}
		}
	}
	if v, ok := _u.mutation.V4(); ok {
		if err := casbinrule.V4Validator(v); err != nil {
			return &ValidationError{Name: "v4", err: fmt.Errorf(`gen: validator failed for field "CasbinRule.v4": %w`, err)}
		}
	}
	if v, ok := _u.mutation.V5(); ok {
		if err := casbinrule.V5Validator(v); err != nil {
			return &ValidationError{Name: "v5", err: fmt.Errorf(`gen: validator failed for field "CasbinRule.v5": %w`, err)}
		}
	}
	return nil
}

func (_u *CasbinRuleUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(casbinrule.Table, casbinrule.Columns, sqlgraph.NewFieldSpec(casbinrule.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Ptype(); ok {
		_spec.SetField(casbinrule.FieldPtype, field.TypeString, value)
	}
	if value, ok := _u.mutation.V0(); ok {
		_spec.SetField(casbinrule.FieldV0, field.TypeString, value)
	}
	if _u.mutation.V0Cleared() {
		_spec.ClearField(casbinrule.FieldV0, field.TypeString)
	}
	if value, ok := _u.mutation.V1(); ok {
		_spec.SetField(casbinrule.FieldV1, field.TypeString, value)
	}
	if _u.mutation.V1Cleared() {
		_spec.ClearField(casbinrule.FieldV1, field.TypeString)
	}
	if value, ok := _u.mutation.V2(); ok {
		_spec.SetField(casbinrule.FieldV2, field.TypeString, value)
	}
	if _u.mutation.V2Cleared() {
		_spec.ClearField(casbinrule.FieldV2, field.TypeString)
	}
	if value, ok := _u.mutation.V3(); ok {
		_spec.SetField(casbinrule.FieldV3, field.TypeString, value)
	}
	if _u.mutation.V3Cleared() {
		_spec.ClearField(casbinrule.FieldV3, field.TypeString)
	}
	if value, ok := _u.mutation.V4(); ok {
		_spec.SetField(casbinrule.FieldV4, field.TypeString, value)
	}
	if _u.mutation.V4Cleared() {
		_spec.ClearField(casbinrule.FieldV4, field.TypeString)
	}
	if value, ok := _u.mutation.V5(); ok {
		_spec.SetField(casbinrule.FieldV5, field.TypeString, value)
	}
	if _u.mutation.V5Cleared() {
		_spec.ClearField(casbinrule.FieldV5, field.TypeString)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(casbinrule.FieldCreatedAt, field.TypeTime, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{casbinrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// CasbinRuleUpdateOne is the builder for updating a single CasbinRule entity.
type CasbinRuleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CasbinRuleMutation
}

// SetPtype sets the "ptype" field.
func (_u *CasbinRuleUpdateOne) SetPtype(v string) *CasbinRuleUpdateOne {
	_u.mutation.SetPtype(v)
	return _u
}

// SetNillablePtype sets the "ptype" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillablePtype(v *string) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetPtype(*v)
	}
	return _u
}

// SetV0 sets the "v0" field.
func (_u *CasbinRuleUpdateOne) SetV0(v string) *CasbinRuleUpdateOne {
	_u.mutation.SetV0(v)
	return _u
}

// SetNillableV0 sets the "v0" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillableV0(v *string) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetV0(*v)
	}
	return _u
}

// ClearV0 clears the value of the "v0" field.
func (_u *CasbinRuleUpdateOne) ClearV0() *CasbinRuleUpdateOne {
	_u.mutation.ClearV0()
	return _u
}

// SetV1 sets the "v1" field.
func (_u *CasbinRuleUpdateOne) SetV1(v string) *CasbinRuleUpdateOne {
	_u.mutation.SetV1(v)
	return _u
}

// SetNillableV1 sets the "v1" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillableV1(v *string) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetV1(*v)
	}
	return _u
}

// ClearV1 clears the value of the "v1" field.
func (_u *CasbinRuleUpdateOne) ClearV1() *CasbinRuleUpdateOne {
	_u.mutation.ClearV1()
	return _u
}

// SetV2 sets the "v2" field.
func (_u *CasbinRuleUpdateOne) SetV2(v string) *CasbinRuleUpdateOne {
	_u.mutation.SetV2(v)
	return _u
}

// SetNillableV2 sets the "v2" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillableV2(v *string) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetV2(*v)
	}
	return _u
}

// ClearV2 clears the value of the "v2" field.
func (_u *CasbinRuleUpdateOne) ClearV2() *CasbinRuleUpdateOne {
	_u.mutation.ClearV2()
	return _u
}

// SetV3 sets the "v3" field.
func (_u *CasbinRuleUpdateOne) SetV3(v string) *CasbinRuleUpdateOne {
	_u.mutation.SetV3(v)
	return _u
}

// SetNillableV3 sets the "v3" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillableV3(v *string) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetV3(*v)
	}
	return _u
}

// ClearV3 clears the value of the "v3" field.
func (_u *CasbinRuleUpdateOne) ClearV3() *CasbinRuleUpdateOne {
	_u.mutation.ClearV3()
	return _u
}

// SetV4 sets the "v4" field.
func (_u *CasbinRuleUpdateOne) SetV4(v string) *CasbinRuleUpdateOne {
	_u.mutation.SetV4(v)
	return _u
}

// SetNillableV4 sets the "v4" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillableV4(v *string) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetV4(*v)
	}
	return _u
}

// ClearV4 clears the value of the "v4" field.
func (_u *CasbinRuleUpdateOne) ClearV4() *CasbinRuleUpdateOne {
	_u.mutation.ClearV4()
	return _u
}

// SetV5 sets the "v5" field.
func (_u *CasbinRuleUpdateOne) SetV5(v string) *CasbinRuleUpdateOne {
	_u.mutation.SetV5(v)
	return _u
}

// SetNillableV5 sets the "v5" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillableV5(v *string) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetV5(*v)
	}
	return _u
}

// ClearV5 clears the value of the "v5" field.
func (_u *CasbinRuleUpdateOne) ClearV5() *CasbinRuleUpdateOne {
	_u.mutation.ClearV5()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *CasbinRuleUpdateOne) SetCreatedAt(v time.Time) *CasbinRuleUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *CasbinRuleUpdateOne) SetNillableCreatedAt(v *time.Time) *CasbinRuleUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// Mutation returns the CasbinRuleMutation object of the builder.
func (_u *CasbinRuleUpdateOne) Mutation() *CasbinRuleMutation {
	return _u.mutation
}

// Where appends a list predicates to the CasbinRuleUpdate builder.
func (_u *CasbinRuleUpdateOne) Where(ps ...predicate.CasbinRule) *CasbinRuleUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *CasbinRuleUpdateOne) Select(field string, fields ...string) *CasbinRuleUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated CasbinRule entity.
func (_u *CasbinRuleUpdateOne) Save(ctx context.Context) (*CasbinRule, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CasbinRuleUpdateOne) SaveX(ctx context.Context) *CasbinRule {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *CasbinRuleUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CasbinRuleUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CasbinRuleUpdateOne) check() error {
	if v, ok := _u.mutation.Ptype(); ok {
		if err := casbinrule.PtypeValidator(v); err != nil {
			return &ValidationError{Name: "ptype", err: fmt.Errorf(`gen: validator failed for field "CasbinRule.ptype": %w`, err)}
		}
	}
	if v, ok := _u.mutation.V0(); ok {
		if err := casbinrule.V0Validator(v); err != nil {
			return &ValidationError{Name: "v0", err: fmt.Errorf(`gen: validator failed for field "CasbinRule.v0": %w`, err)}
		}
	}
	if v, ok := _u.mutation.V1(); ok {
		if err := casbinrule.V1Validator(v); err != nil {
			return &ValidationError{Name: "v1", err: fmt.Errorf(`gen: validator failed for field "CasbinRule.v1": %w`, err)}
		}
	}
	if v, ok := _u.mutation.V2(); ok {
		if err := casbinrule.V2Validator(v); err != nil {
			return &ValidationError{Name: "v2", err: fmt.Errorf(`gen: validator failed for field "CasbinRule.v2": %w`, err)}
		}
	}
	if v, ok := _u.mutation.V3(); ok {
		if err := casbinrule.V3Validator(v); err != nil {
			return &ValidationError{Name: "v3", err: fmt.Errorf(`gen: validator failed for field "CasbinRule.v3": %w`, err)}
		}
	}
	if v, ok := _u.mutation.V4(); ok {
		if err := casbinrule.V4Validator(v); err != nil {
			return &ValidationError{Name: "v4", err: fmt.Errorf(`gen: validator failed for field "CasbinRule.v4": %w`, err)}
		}
	}
	if v, ok := _u.mutation.V5(); ok {
		if err := casbinrule.V5Validator(v); err != nil {
			return &ValidationError{Name: "v5", err: fmt.Errorf(`gen: validator failed for field "CasbinRule.v5": %w`, err)}
		}
	}
	return nil
}

func (_u *CasbinRuleUpdateOne) sqlSave(ctx context.Context) (_node *CasbinRule, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(casbinrule.Table, casbinrule.Columns, sqlgraph.NewFieldSpec(casbinrule.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "CasbinRule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, casbinrule.FieldID)
		for _, f := range fields {
			if !casbinrule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != casbinrule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Ptype(); ok {
		_spec.SetField(casbinrule.FieldPtype, field.TypeString, value)
	}
	if value, ok := _u.mutation.V0(); ok {
		_spec.SetField(casbinrule.FieldV0, field.TypeString, value)
	}
	if _u.mutation.V0Cleared() {
		_spec.ClearField(casbinrule.FieldV0, field.TypeString)
	}
	if value, ok := _u.mutation.V1(); ok {
		_spec.SetField(casbinrule.FieldV1, field.TypeString, value)
	}
	if _u.mutation.V1Cleared() {
		_spec.ClearField(casbinrule.FieldV1, field.TypeString)
	}
	if value, ok := _u.mutation.V2(); ok {
		_spec.SetField(casbinrule.FieldV2, field.TypeString, value)
	}
	if _u.mutation.V2Cleared() {
		_spec.ClearField(casbinrule.FieldV2, field.TypeString)
	}
	if value, ok := _u.mutation.V3(); ok {
		_spec.SetField(casbinrule.FieldV3, field.TypeString, value)
	}
	if _u.mutation.V3Cleared() {
		_spec.ClearField(casbinrule.FieldV3, field.TypeString)
	}
	if value, ok := _u.mutation.V4(); ok {
		_spec.SetField(casbinrule.FieldV4, field.TypeString, value)
	}
	if _u.mutation.V4Cleared() {
		_spec.ClearField(casbinrule.FieldV4, field.TypeString)
	}
	if value, ok := _u.mutation.V5(); ok {
		_spec.SetField(casbinrule.FieldV5, field.TypeString, value)
	}
	if _u.mutation.V5Cleared() {
		_spec.ClearField(casbinrule.FieldV5, field.TypeString)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(casbinrule.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &CasbinRule{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{casbinrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
