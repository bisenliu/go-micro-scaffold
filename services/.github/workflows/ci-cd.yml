# CI/CD Pipeline for Go Micro Scaffold with Swagger Integration

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.21'
  APP_NAME: 'go-micro-scaffold'

jobs:
  # Code quality and testing
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      working-directory: ./services
      run: |
        go mod download
        go mod verify
    
    - name: Install tools
      working-directory: ./services
      run: make install-tools
    
    - name: Format check
      working-directory: ./services
      run: |
        make fmt
        git diff --exit-code
    
    - name: Vet
      working-directory: ./services
      run: make vet
    
    - name: Lint
      working-directory: ./services
      run: make lint
    
    - name: Generate Swagger docs
      working-directory: ./services
      run: make swagger-gen
    
    - name: Validate Swagger docs
      working-directory: ./services
      run: make swagger-validate
    
    - name: Run tests
      working-directory: ./services
      run: make test-cover
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./services/coverage.out
        flags: unittests
        name: codecov-umbrella
    
    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          ./services/coverage.out
          ./services/coverage.html

  # Build application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      working-directory: ./services
      run: go mod download
    
    - name: Install Swagger tools
      working-directory: ./services
      run: go install github.com/swaggo/swag/cmd/swag@latest
    
    - name: Generate Swagger docs
      working-directory: ./services
      run: make swagger-gen
    
    - name: Set build variables
      id: vars
      run: |
        echo "VERSION=$(git describe --tags --always --dirty)" >> $GITHUB_OUTPUT
        echo "BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')" >> $GITHUB_OUTPUT
        echo "GIT_COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
    
    - name: Build binary
      working-directory: ./services
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        BINARY_NAME="server-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        go build \
          -ldflags "-X main.Version=${{ steps.vars.outputs.VERSION }} -X main.BuildTime=${{ steps.vars.outputs.BUILD_TIME }} -X main.GitCommit=${{ steps.vars.outputs.GIT_COMMIT }} -s -w" \
          -trimpath \
          -o "bin/${BINARY_NAME}" \
          cmd/server/main.go
    
    - name: Archive binaries
      uses: actions/upload-artifact@v3
      with:
        name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
        path: ./services/bin/

  # Build Docker image
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.APP_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Install Swagger tools
      working-directory: ./services
      run: |
        go install github.com/swaggo/swag/cmd/swag@latest
        make swagger-gen
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./services
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to development environment
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Install tools
      working-directory: ./services
      run: make install-tools
    
    - name: Deploy to development
      working-directory: ./services
      run: |
        chmod +x scripts/deploy.sh
        ./scripts/deploy.sh dev --force --docker
      env:
        VERSION: ${{ github.sha }}
        DEPLOY_TARGET: development

  # Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Install tools
      working-directory: ./services
      run: make install-tools
    
    - name: Deploy to staging
      working-directory: ./services
      run: |
        chmod +x scripts/deploy.sh
        ./scripts/deploy.sh staging --force --docker
      env:
        VERSION: ${{ github.sha }}
        DEPLOY_TARGET: staging

  # Deploy to production environment
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Install tools
      working-directory: ./services
      run: make install-tools
    
    - name: Extract version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Deploy to production
      working-directory: ./services
      run: |
        chmod +x scripts/deploy.sh
        ./scripts/deploy.sh prod --force --docker
      env:
        VERSION: ${{ steps.version.outputs.VERSION }}
        DEPLOY_TARGET: production

  # Create release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$PREVIOUS_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s")
        fi
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Changes
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Features
          - ✅ Swagger API documentation
          - ✅ Clean Architecture implementation
          - ✅ JWT authentication
          - ✅ Multi-environment deployment
          
          ## Docker Images
          - `${{ env.APP_NAME }}:${{ github.ref_name }}`
          - `${{ env.APP_NAME }}:latest`
        draft: false
        prerelease: false
    
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./binaries-linux-amd64/server-linux-amd64
        asset_name: server-linux-amd64
        asset_content_type: application/octet-stream